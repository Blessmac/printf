.SH RETURN VALUE
Returns the number of all the characters printed, excluding the NULL byte used to end output to strings.
.SH Format String Format
The format string is a character string, which contains two types of directives: ordinary characters which are coppied to the output stream; and conversion specifiers. Each conversion specification is introduced by the character %, and ends with a conversion specifier.
.SH Conversion Specifiers
This are the characters that specifies the type of conversion to be applied. The conversion specifiers and their meanings are:
.TP
.B c
.R The \fIint\fR argument is converted to a char, and the result is printed.
.TP
.B s
.R The \fIconst char *\fR is a pointer to an array of characters, that converts the corresponding argument to a character string.
.TP
.B d, i
.R The \fIint\fR argument is converted to signed decimal notation.
.TP
.B %, %%
.R If only the \fI%\fR character is written no argument is converted. The complete conversion specification is \fI%%\fR, that returns the actual sign if there in front.
.PP
.SH NOTES
.R The \fB_printf()\fR is a project collaboration between \fBSamuel Adebayo\fR and \fBGerald Juwah\fR, Students studing Software Engineering at \fBALX School\fR.
.SH BUGS
.R In process
.PP
.SH EXAMPLE
.R To print the the string \fBHello ALX!\fR and its length in decimal.

#include "main.h"

int main(void)

{

        int length;

        _printf("%s\n", "Hello, ALX!")

        _printf("Hello ALX! contains %d characters\n", length);

        length = _printf("Hello Holberton!");

        return (0);

}
.SH SEE ALSO
.R printf(3)
.SH AUTHORS
Written by \fBSamuel Adebayo\fR and \fBGerald Juwah.

